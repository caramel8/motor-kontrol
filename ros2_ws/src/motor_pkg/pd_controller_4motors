#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32MultiArray
from typing import List

class PDController(Node):
    def __init__(self):
        super().__init__('pd_controller_4')

        # ===== Parametreler =====
        # Dört hedef birden (ticks cinsinden)
        default_targets = [1000, 1000, 1000, 1000]
        self.targets: List[int] = self.declare_parameter(
            'targets', default_targets
        ).get_parameter_value().integer_array_value or default_targets

        # Tekil (skaler) PD kazançları — istersen dizi de tanıyacağız
        kp_param = self.declare_parameter('kp', 0.3).get_parameter_value()
        kd_param = self.declare_parameter('kd', 0.1).get_parameter_value()

        # Parametreler hem skaler hem dizi olabilir
        self.kp_list: List[float] = self._as_list(kp_param, 4, 0.3)
        self.kd_list: List[float] = self._as_list(kd_param, 4, 0.1)

        # Ölü bölge ve minimum çalışma eşiği (duty yüzdesi)
        self.dead = self.declare_parameter('dead', 20.0).get_parameter_value().double_value
        self.min_run = self.declare_parameter('min_run', 40.0).get_parameter_value().double_value

        # Önceki hatalar (D terimi için)
        self.prev_err = [0.0, 0.0, 0.0, 0.0]

        # ROS arayüzleri
        self.sub_enc = self.create_subscription(Int32MultiArray, 'encoder_data', self.enc_cb, 10)
        self.pub_cmd = self.create_publisher(Int32MultiArray, 'motor_cmd', 10)

        self.get_logger().info(
            f"PD4 ready | targets={list(self.targets)} | kp={self.kp_list} | kd={self.kd_list} | "
            f"dead={self.dead} | min_run={self.min_run}"
        )

    # ---- yardımcılar ----
    def _as_list(self, param_value, n: int, default_scalar: float) -> List[float]:
        """Parametre skaler ise [s,s,s,s], dizi ise uzunluğu n'e göre kes/uzat."""
        vals: List[float] = []
        if param_value.type == param_value.Type.DOUBLE_ARRAY:
            vals = list(param_value.double_array_value)
        elif param_value.type == param_value.Type.INTEGER_ARRAY:
            vals = [float(v) for v in param_value.integer_array_value]
        elif param_value.type == param_value.Type.DOUBLE:
            vals = [param_value.double_value] * n
        elif param_value.type == param_value.Type.INTEGER:
            vals = [float(param_value.integer_value)] * n
        else:
            vals = [default_scalar] * n

        # Uzunluğu n yap
        if len(vals) < n:
            vals += [vals[-1] if vals else default_scalar] * (n - len(vals))
        elif len(vals) > n:
            vals = vals[:n]
        return vals

    def _sat(self, u: float, lo=-100.0, hi=100.0) -> float:
        return hi if u > hi else lo if u < lo else u

    def _shape(self, u: float) -> int:
        """Ölü bölge + minimum çalışma + saturasyon (duty, yüzde)."""
        s = 1 if u >= 0 else -1
        a = abs(u)
        if a < self.dead:
            return 0
        if a < self.min_run:
            return int(s * self.min_run)
        return int(self._sat(u, -100.0, 100.0))

    # ---- callback ----
    def enc_cb(self, msg: Int32MultiArray):
        data = list(msg.data)
        if len(data) < 4:
            # Eksik geldiğinde kalanları son değerle doldur
            data += [data[-1] if data else 0] * (4 - len(data))
        pos = data[:4]

        cmds: List[int] = []
        for i in range(4):
            err = int(self.targets[i]) - int(pos[i])
            # Not: dt'yi bilmediğimiz için D terimi "örnek başına değişim" gibi davranır
            u = self.kp_list[i] * err + self.kd_list[i] * (err - self.prev_err[i])

            self.prev_err[i] = err
            cmds.append(self._shape(u))

        # Log’u çok sıkmak istemiyorsan aşağı satırı yorumlayabilirsin
        self.get_logger().info(f"u={cmds}  err={[int(self.targets[i])-int(pos[i]) for i in range(4)]}")

        out = Int32MultiArray()
        out.data = cmds  # [u1,u2,u3,u4]  → seri köprü CSV'ye çevirir
        self.pub_cmd.publish(out)

def main(args=None):
    rclpy.init(args=args)
    node = PDController()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
